function join(e,t,r){var a="";if(r||(r=9999),t.length>0){t=t.reverse(),a=t.pop();for(var n=0;t.length>0&&n++<r;)a+=e+t.pop()}return a}function array_search(e,t){for(var r=0;r<e.length;r++)for(var a=0;a<t.length;a++)if(t[a]===e[r])return a;return!1}var module={exports:null};!function(){var e=!1,t=/xyz/.test(function(){xyz})?/\b_super\b/:/.*/;this.Class=function(){},Class.extend=function(r,a){function n(){!e&&this.init&&this.init.apply(this,arguments)}void 0==a&&(a=r,r="Class");var s=this.prototype;e=!0;var i=new this;e=!1;for(var c in a)i[c]="function"==typeof a[c]&&"function"==typeof s[c]&&t.test(a[c])?function(e,t){return function(){var r=this._super;this._super=s[e];var a=t.apply(this,arguments);return this._super=r,a}}(c,a[c]):a[c];n.prototype=i;var l=new Function("return function "+r+"(){ }")();return n.prototype.constructor=l,n.extend=arguments.callee,n},module.exports=Class}();var Searchbar=Class.extend({searchbar:null,searchable:null,hiddenClass:"searchable-row-hidden",init:function(){if(this.searchbar=document.querySelector(".searchbar"),this.searchable=document.querySelector(".searchable"),this.searchbar&&this.searchable&&this.parseSearchable())for(var e=this.getSearchbarElements(),t=0;t<e.length;++t)this.processSearchbarElement(e[t])},parseSearchable:function(){var e=this.getSearchableRows();if(0===e.length)return!1;for(var t=0;t<e.length;++t)for(var r=e[t].querySelectorAll("[data-searchbar-value]"),a=0;a<r.length;++a)this.processCell(r[a],e[t]);return!0},getSearchableRows:function(){var e=this.searchable.querySelectorAll(".searchable-row");return 0===e.length&&"TABLE"===this.searchable.tagName&&(e=this.searchable.querySelectorAll("tbody tr")),e},processCell:function(e,t){var r="data-"+e.getAttribute("headers"),a=e.getAttribute("data-searchbar-value");t.setAttribute(r,a),"1"===e.getAttribute("data-searchbar-value-list")&&t.setAttribute(r+"-list",1)},getSearchbarElements:function(){return this.searchbar.querySelectorAll("input, select, button")},processSearchbarElement:function(e){var t="",r=0;switch(e.type){case"text":t="keyup",r=150;break;case"select-one":t="change";break;case"checkbox":case"reset":t="click"}if(t.length>0){var a="reset"!==e.type?this.debounce(this.search,r).bind(this):this.reset.bind(this);e.addEventListener(t,a)}},search:function(){var e=new Event("searchbar:beforeSearch");if(this.searchbar.dispatchEvent(e)){this.resetSearchable();for(var t=this.getSearchableRows(),r=0;r<t.length;++r){for(var a=t[r],n=!0,s=this.getSearchbarElements(),i=0;i<s.length;i++)if(n){var c=s[i],l=this.getValue(c),o=this.getAttr(c);if(o&&l&&"all"!==l){var u="text"!==c.type?this.nonTextSearch(a,o,l):this.textSearch(a,o,l);n=n&&u}}n||a.classList.add(this.hiddenClass)}this.searchbar.dispatchEvent(new Event("searchbar:afterSearch"))}},getValue:function(e){switch(e.type){case"text":return e.value;case"select-one":return e.options[e.selectedIndex].value;case"checkbox":return e.checked}return""},getAttr:function(e){var t=e.getAttribute("id");return t?"data-"+(t=t.replace(/_.*/,"")):""},nonTextSearch:function(e,t,r){return e.hasAttribute(t+"-list")?e.matches("["+t+"*=_"+r+"_]"):e.getAttribute(t)===r},textSearch:function(e,t,r){try{var a=new RegExp(r,"i");return e.getAttribute(t).match(a)}catch(e){return!1}},reset:function(){var e=new Event("searchbar:reset");return!this.searchbar.dispatchEvent(e)||(this.searchbar.reset(),this.resetSearchable()),!1},resetSearchable:function(){for(var e=this.getSearchableRows(),t=0;t<e.length;++t)e[t].classList.remove(this.hiddenClass)},debounce:function(e,t,r){if(0===t)return e;var a;return function(){var n=this,s=arguments,i=function(){a=null,r||e.apply(n,s)},c=r&&!a;clearTimeout(a),a=setTimeout(i,t),c&&e.apply(n,s)}}}),Focuser=Class.extend({init:function(){var e=document.querySelector("[autofocus]");if(e&&e.length>0)return void e[0].focus();var t=document.getElementById("shadowlab-form");if(t){var r=t.querySelector("input, select, textarea");r&&r.length>0&&r[0].focus()}}}),Summarizer=Class.extend({element:null,init:function(e){if(e||(e=this.getElement()),e.tagName&&"TABLE"===e.tagName&&e.matches(".summarized"))for(var t=e.querySelectorAll(".summary *:first-child a"),r=0;r<t.length;r++)t[r].addEventListener("click",this.summaryClicked.bind(this))},getElement:function(){return document.querySelector("table.summarized")},summaryClicked:function(e){var t=this.getClosest(e.target,"tbody");this.toggleClass(t,"clicked"),e.stopPropagation(),e.preventDefault()},getClosest:function(e,t){do{if(e.matches(t))return e}while(e=e.parentNode);return null},toggleClass:function(e,t){e.classList.toggle(t,!e.classList.contains(t))}}),Shadowlab=new Vue({data:vueData,el:"#shadowlab",mounted:function(){document.title=this.title+" | Shadowlab"},filters:{capitalize:function(e){return(e+"").replace(/^([a-z\u00E0-\u00FC])|\s+([a-z\u00E0-\u00FC])/g,function(e){return e.toUpperCase()})},nl2br:function(e){return void 0===e||null===e?"":(e+"").replace(/(\r\n|\n\r|\r|\n)/g,"<br>$1")},makeUpdateLink:function(e){var t=window.location.href.split("/");return join("/",t,array_search(["create","read","update","delete"],t)-1)+"/update/"+e},makeCollectionLink:function(e){var t=window.location.href.split("/");return e=array_search([e],t),join("/",t,e)}}});document.addEventListener("DOMContentLoaded",function(){document.getElementsByClassName("searchbar").length>0&&new Searchbar,document.getElementsByClassName("summarized").length>0&&new Summarizer,new Focuser});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
